name: Get Increment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ] 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      majorStartingTags:
        type: string
        description: the starting tags for major increment, commat separated.
        default: ""
      majorFloatingTags:
        type: string
        description: the floating tag for major increment, commat separated.
        default: "#breaking"
      minorStartingTags:
        type: string
        description: the starting tags for minor increment, commat separated.
        default: "feat"
      minorFloatingTags:
        type: string
        description: the floating tag for minor increment, commat separated.
        default: ""
      patchStartingTags:
        type: string
        description: the starting tags for patch increment, commat separated.
        default: "fix, build, config, docs, perf, refactor, resolve, style, test, ci"
      patchFloatingTags:
        type: string
        description: the floating tag for patch increment, commat separated.
        default: ""
      noneStartingTags:
        type: string
        description: the starting tags for minor increment, commat separated.
        default: ""
      noneFloatingTags:
        type: string
        description: the floating tag for minor increment, commat separated.
        default: ""
        
  # Allows you to run this workflow into a another workflow
  workflow_call:
   inputs:
      majorStartingTags:
        type: string
        description: the starting tags for major increment, commat separated.
        default: ""
      majorFloatingTags:
        type: string
        description: the floating tag for major increment, commat separated.
        default: "#breaking"
      minorStartingTags:
        type: string
        description: the starting tags for minor increment, commat separated.
        default: "feat"
      minorFloatingTags:
        type: string
        description: the floating tag for minor increment, commat separated.
        default: ""
      patchStartingTags:
        type: string
        description: the starting tags for patch increment, commat separated.
        default: "fix, build, config, docs, perf, refactor, resolve, style, test, ci"
      patchFloatingTags:
        type: string
        description: the floating tag for patch increment, commat separated.
        default: ""
      noneStartingTags:
        type: string
        description: the starting tags for minor increment, commat separated.
        default: ""
      noneFloatingTags:
        type: string
        description: the floating tag for minor increment, commat separated.
        default: ""
   

jobs:

  get-repository:
    runs-on: ubuntu-latest
    steps:
    
    - name: echo input
      run: |
        echo ${{ github.event.inputs.noneStartingTags }};
        echo "${{ github.event.inputs.noneFloattingTags }}";
        echo ${{ toString(github.event.inputs.patchStartingTags) }};
        echo "${{ toString(github.event.inputs.patchFloattingTags) }}";
        echo github.event.inputs.minorStartingTags;
        echo github.event.inputs.minorFloattingTags;
        echo github.event.inputs.majorStartingTags;
        echo github.event.inputs.majorFloattingTags;
        echo github.event.inputs.doesnexist;
        
    - name: Get increment
      id: get-increment
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
            const commits = ${{ toJSON(github.event.commits) }} ;
            console.log("commits = "+commits);
            const noneStartingTags = github.event.inputs.noneStartingTags.split(",");
            console.log("noneStartingTags = "+noneStartingTags);
            const noneFloatingTags = github.event.inputs.noneFloatingTags.split(",");
            console.log("noneFloatingTags = "+noneFloatingTags);
            const patchStartingTags = github.event.inputs.patchStartingTags.split(",");
            console.log("patchStartingTags = "+patchStartingTags);
            const patchFloatingTags = github.event.inputs.patchFloatingTags.split(",");
            console.log("patchFloatingTags = "+patchFloatingTags);
            const minorStartingTags = github.event.inputs.minorStartingTags.split(",");
            console.log("minorStartingTags = "+minorStartingTags);
            const minorFloatingTags = github.event.inputs.minorFloatingTags.split(",");
            console.log("minorFloatingTags = "+minorFloatingTags);
            const majorStartingTags = github.event.inputs.majorStartingTags.split(",");
            console.log("majorStartingTags = "+majorStartingTags);
            const majorFloatingTags = github.event.inputs.majorFloatingTags.split(",");
            console.log("majorFloatingTags = "+majorFloatingTags);
            const unknow = 0;
            const none = 1;
            const patch = 2;
            const minor = 3;
            const major= 4;
            let response = unknow ;          
            for (const commit of commits) {
              console.log(commit.message);
              if(commit.message.includes("[skip hint]")){
              console.log("Skip hint commit");
              continue;
              }
              if((majorFloatingTags[0] != "" && majorFloatingTags.some(tag => commit.message.includes(tag)))
                || (majorStartingTags[0] != "" && majorStartingTags.some(tag => commit.message.startsWith(tag)))){
              console.log("Commit set min increment to major");
              if(response < major){
                console.log("Increment update to major");
                response = major;
              }
              }
              else if((minorFloatingTags[0] != "" && minorFloatingTags.some(tag => commit.message.includes(tag)))
                  || (minorStartingTags[0] != "" && minorStartingTags.some(tag => commit.message.startsWith(tag)))){
              console.log("Commit set min increment to minor");
              if(response < minor){
                console.log("Increment update to minor");
                response = minor;
              }
              }
              else if((patchFloatingTags[0] != "" && patchFloatingTags.some(tag => commit.message.includes(tag)))
                  || (patchStartingTags[0] != "" && patchStartingTags.some(tag => commit.message.startsWith(tag)))){
              console.log("Commit set min increment to patch");
              if(response < patch){
                console.log("Increment update to patch");
                response = patch;
              }
              }
              else if((noneFloatingTags[0] != "" && noneFloatingTags.some(tag => commit.message.includes(tag)))
                  || (noneStartingTags[0] != "" && noneStartingTags.some(tag => commit.message.startsWith(tag)))){
              console.log("Commit set min increment to none");
              if(response < none){
                console.log("Increment update to none");
                response = none;
              }
              }
              else{
              console.log("Increment is unkown");
              }
            }
            console.log("increment = "+ response);
            switch (response){
              case 1:
              console.log("return increment = None");
              return "None";
              case 2:
              console.log("return increment = Patch");
              return "Patch";
              case 3:
              console.log("return increment = Minor");
              return "Minor";
              case 4:
              console.log("return increment = Major");
              return "Major";
              case 0:
              default:
              console.log("return increment = Unknow");
              return "Unknow";
            }
            
    - name: output
      run: echo "${{steps.get-increment.outputs.result}}"
