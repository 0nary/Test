
name: Increment by
# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      increment:
        type: string
        description: the increment to apply.
        default: "Unknow"
      delete-suffixe:
        type: boolean
        description: remove the suffixe part of the last tag, if any?
        default: false

jobs:
  Update-version:
    #check before call
    if: ${{ inputs.increment == 'Major' || inputs.increment == 'Minor' || inputs.increment == 'Patch' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest #windows-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Reset Origin
        run: |
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git checkout ${{ github.ref_name }}
#   'github.actor' will be the account how will perform the push (or most of the case 'merge pull request').
#   'secrets.GITHUB_TOKEN' was the token creates for the current action, it is associated with the 'github.actor' and will persist until the end of the action.

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          #${{ steps.import_gpg.outputs.name }} is empty 
          
      - name: Setup CI GIT
        run: |
          git config user.name "Gregoire Poncelet"
          git config user.email ${{ steps.import_gpg.outputs.email }}
          git config --global user.signingkey ${{ steps.import_gpg.outputs.keyid }}
          git config --global commit.gpgsign true 

      - name : Install Versioning.NET
        run: |
          dotnet tool install --global Versioning.NET
          
      - name: Pull latest version tag
        run: |
          git fetch
          git pull
          echo "LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV
          
      - name : Updating version
        run: |
          dotnet-version increment-version -d "." -v "${{inputs.increment}}"
                  
      - name: Update tag
        id: update-tag
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
              const oldTag = "${{env.LATEST_TAG}}";
              console.log("old tag = "+oldTag)   
              let newTag = oldTag;
              if(oldTag.startsWith("v"))
                newTag = newTag.substring(1)
              if(oldTag.includes("-"))
                newTag = newTag.split("-")[0]
              const newTagMajor = parseInt(newTag.split(".")[0]); 
              const newTagMinor = parseInt(newTag.split(".")[1]); 
              const newTagPatch = parseInt(newTag.split(".")[2]);  
              newTag = "";
              if(oldTag.startsWith("v"))
                newTag = "v"
              switch("${{inputs.increment}}"){
                case "Patch":     
                  newTag += newTagMajor+"."+newTagMinor+"."+(newTagPatch+1)
                  break;
                case "Minor":     
                  newTag += newTagMajor+"."+(newTagMinor+1)+".0"
                  break;
                case "Major":     
                  newTag += (newTagMajor+1)+".0.0"
                  break;
                default:
                  newTag = oldTag;
                  break;
              }              
              if(oldTag.includes("-") && )
                newTag = oldTag.split("-")[1]
              return newTag
      - name: Get new version
        id: get-version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let version = ${{ steps.update-tag.outputs.result }};
            if(version.startsWith("v"))
                version = version.substring(1);
            return version;
          
      - name: Commit changes
        run: git commit -m "ci(Versioning): Increment version to ${{ steps.get-version.outputs.result }} [skip ci] [skip hint]" -a
        
      - name: Get commit id
        run: echo "COMMIT_ID=$(git log -1 | grep ^commit | awk '{print $2}')" >> $GITHUB_ENV
        
      - name: echo commit id
        run: echo ${{env.COMMIT_ID}}
          
      - name: push commit
        run: git push --repo="https://0nary:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
              
      - name: echo tag
        run: echo ${{steps.update-tag.outputs.result}}
        
      - name: Add tag
        uses: actions/github-script@v3
        env:
          TAG: ${{ steps.set-tag.outputs.tag_name }}
        with:
          github-token: ${{ github.token }}
          script: |
            console.log("sha = "+context.sha);
            console.log("commit id = "+"${{env.COMMIT_ID}}");
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.update-tag.outputs.result }}",
              sha: "${{env.COMMIT_ID}}"
            });
        #run: git tag ${{steps.update-tag.outputs.result}} ${{env.COMMIT_ID}} #-m "Tag for new version" 
          
      - name: push tag
        run: git push --repo="https://0nary:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
